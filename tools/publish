#!/bin/sh

usage() 
{
    echo "Usage: `basename $0` [--notest]" >&2
    echo "Prepares for publishing and publish to npm registry."  >&2
    echo  >&2
    echo "WARNING! Prefer using 'yarn run publish' when available!" >&2
    exit 2
}

notest=false

if [ "$1" = "--notest" ]
then
    shift
    notest=true
fi

if [ "$1" != "" ]
then
    usage
fi

package=$(awk -F\" '/"name": / { print $4}' ./package.json)

echo "About to publish package '$package'..."

# check everything is committed
echo "Checking git status..."
modified="$(git status . | grep "modified:" | grep -v "package.json")"
if [ ! -z "$modified" ]
then
    echo "WARNING! Git working directory is not clean:"
    echo "$modified"
    echo "Type return to continue, or ^C to cancel"
    read ans
fi

echo "Compiling..."
rm -fr dist
yarn run build

ans='no value'
$notest || while [ "$ans" != 'y' -a "$ans" != 'n' -a "$ans" != '' ]
do
    read -p 'Do you want to test the packages installation with test_demo? (y|n) [y] ' ans
    case "$ans" in 
    'y'|'')
        log=/tmp/log.$$
        > $log
        demoprocfile=/tmp/demoproc.$$
        >$demoprocfile
        trap 'kill $(cat $demoprocfile) 2>/dev/null; exit' INT
        ( ( $(dirname $0)/test_demo before_publish 2>&1 & echo $! > $demoprocfile; wait ) | tee -a $log ) &
        demoproc=$(cat $demoprocfile)
        [ "$demoproc" = "" ] && sleep 5
        demoproc=$(cat $demoprocfile)


        finished=false
        count=0
        while [ "$count" -lt 60 ] && ! $finished
        do
            sleep 1
            #echo 'Loop...' $count
            [ $count -gt 0 ] && count=$(($count + 1))
            [ $count = 0 ] && grep 'Starting domoja...' $log > /dev/null && count=1
            [ "$(ps -h $demoproc)" = "" ] && finished=true # process exited
            grep 'Error: listen EADDRINUSE: address already in use :::' $log > /dev/null && finished=true
            grep 'server listening on port' $log > /dev/null && finished=true && pkill -P $demoproc && kill $demoproc 
        done

        if ! $finished
        then
            echo 'Timeout: demo lasting too long, killing it!'
            [ "$(ps -h $demoproc)" = "" ] || pkill -P $demoproc && kill $demoproc  > /dev/null
        fi

        cat >/tmp/msgs.$$ <<EOF
(ConfigLoader.parse) Loading config file
Successfully imported class 'group'
Successfully imported class 'astronomy'
Successfully imported class 'tempo'
ConfigLoader emitted "startup"
will trigger at
emitted "change": {"newValue":
triggers...
EOF

        sed 's/\x1b\[[0-9;]*m//g' < $log > $log.text
        while read msg 
        do
            if ! grep -q "$msg" $log.text
            then
                echo "ERROR: test_demo did not run successfully! Could not find '$msg' in output..."
                echo 'Aborting...'
                exit 1
            fi
        done < /tmp/msgs.$$
        echo 'SUCCESS! test_demo executed successfully!'
        rm -f $log $log.text /tmp/msgs.$$
        ;;
    'n')
        ;;
    esac
done

# check version
echo "Checking version..."
npm_version=$(npm view -json $package | awk -F\" '/"_id":/ { print $4 }' | awk -F@ '{ print $2}')
version=$(awk -F\" '/"version": / { print $4}' ./package.json)
if [ "$npm_version" = "$version" ]; then
    [ "$REQUESTED_PACKAGE_VERSION" = "" ] && echo "Warning: version '$version' in package.json is the same as in npm registry."
    [ "$REQUESTED_PACKAGE_VERSION" = "" ] && echo "=> Enter new version (major, minor, or patch) to the next question below <="
    yarn config set version-tag-prefix "$package.v"
    yarn config set version-git-message "$package.v%s"
    if [ "$REQUESTED_PACKAGE_VERSION" = "" ]
    then
        yarn version
    else
        echo "$REQUESTED_PACKAGE_VERSION" | yarn version
    fi
    yarn config set version-tag-prefix "v"
    yarn config set version-git-message "v%s"
fi

echo "Creating package..."
repo=`basename $(pwd)`.$$
sed -i 's!\("main": *\)"\([^.]*\)\.ts"!\1"dist/\2.js"!' package.json
yarn pack --filename /tmp/$repo.tar.gz
sed -i 's!\("main": *\)"dist/\([^.]*\)\.js"!\1"\2.ts"!' package.json


echo "Publishing..."
npm publish --registry https://registry.npmjs.org /tmp/$repo.tar.gz #--dry-run 

version=$(awk -F\" '/"version": / { print $4}' ./package.json)
echo "Pushing tag $package.v$version"
git push origin $package.v$version
echo

echo 'You should now test the published package with:'
echo "\$ $(dirname $0)/test_demo after_publish"

