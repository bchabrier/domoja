#!/bin/sh

DEBUG=false
DEBUG_SECTION=scenarios
DEBUG_FILE=zwave.yml

SOURCES_CONFIG_DIR=`dirname $0`/../../domoja-config
DEMO_CONFIG=`dirname $0`/../config/demo.yml
SECTIONS="imports sources devices scenarios pages"

SOURCES_CONFIG="$(for f in $SOURCES_CONFIG_DIR/*.yml; do echo $f; done | grep -v /demo.yml)"

SOURCES_CONFIG_DIR="`(cd $SOURCES_CONFIG_DIR; pwd)`"

if $DEBUG
then
  found=false
  for s in $SECTIONS
  do
    if [ "$s" = "$DEBUG_SECTION" ]
    then 
      found=true
    fi
  done
  $found || echo "WARNING: DEBUG_SECTION '$DEBUG_SECTION' not found!"

  found=false
  for f in $SOURCES_CONFIG
  do
    if [ "$(basename $f)" = "$DEBUG_FILE" ]
    then
      found=true
    fi
  done
  $found || echo "WARNING: DEBUG_FILE '$DEBUG_FILE' not found!"
fi

cp $DEMO_CONFIG /tmp/`basename $DEMO_CONFIG`.`date +%Y%m%d-%H%M%S`

> $DEMO_CONFIG

for section in $SECTIONS
do
    $DEBUG && echo "Handling section $section..."
    echo "$section:" >> $DEMO_CONFIG

    case "$section" in
    "imports")
         cat >> $DEMO_CONFIG <<EOF
  - module: core/sources/demo
    source: demo
EOF
        ;;
    "devices")
        echo '  - comm: { type: variable, widget: "comm", name: "Communication"}' >> $DEMO_CONFIG
        ;;
    "scenarios")
         cat >> $DEMO_CONFIG <<EOF
  - demo:
    - presence_simulator:
        debug: true
        triggers:
          - at: startup
        actions:
          - !!js/function 'function f(callback) {
            //return callback(null);
            var self = this;
            function pgm(device) {
              var onAt = 20000 + 60000 * Math.random();
              var offAt = onAt + 2000 + 30000 * Math.random();
              self.isReleased() || setTimeout(() => {
                self.isReleased() || self.setDeviceState(device, "0");}, onAt);
              self.isReleased() || setTimeout(() => {
                self.isReleased() || self.setDeviceState(device, "1"); pgm(device);}, offAt);
            }
            pgm("hall");
            pgm("escalier");
            pgm("cuisine");
            pgm("bureau");
            callback(null);
           }'
    - pool-temp_simulator:
        debug: true
        triggers:
          - cron: */30 * * * * *
        actions:
          - !!js/function 'function pool_temp(callback) {
              let MIN = -2; // min temperature
              let MAX = 32; // max temperature

              let prev_temp = parseFloat(this.getDeviceState("piscine.temperature") || (Date.now() % ((MAX - MIN)*10))/10 + MIN, 10);

              let temp = ((prev_temp * 10) % 2 == 0)?0.2:-0.2;
              temp = temp + prev_temp;

              if (temp > MAX) temp = MAX - 0.1;
              if (temp < MIN) temp = MIN;

              temp = temp.toFixed(1);

              this.setDeviceState("piscine.temperature", temp, callback);
            }'
EOF
        ;;
    esac

    for file in $SOURCES_CONFIG
    do
        $DEBUG && [ "$DEBUG_SECTION" = "$section" ] && echo "Handling file $file..."

        # keep only a couple of things in debug mode to make sure we have some traces but not too many
        sed -e 's/debug: true/debug: false/g' -e 's/^\( *- sunset_plus_30mn: { type: variable,\)/\1 debug: true,/g' $file | awk '
        BEGIN   {
            where="before imports"
            acceptedSources="astronomy tempo"
            acceptedSources=" "acceptedSources" "
            debug='$($DEBUG && [ "$DEBUG_SECTION" = "$section" ] && [ "$DEBUG_FILE" = "$(basename $file)" ] && echo 1|| echo 0)'
        }

        where == "in '$section'" { doprint=1 }
        where != "in '$section'" { doprint=0 }

        /^imports:/ { where="in imports"; next }
        /^sources:/ { where="in sources"; next }
        /^devices:/ { where="in devices"; next }
        /^scenarios:/ { where="in scenarios"; next }
        /^pages:/ { where="in pages"; next }
        /^users:/ { where="in users"; next }

        where=="in imports" && /^ *- *module:/ { module=$NF; next }
        where=="in imports" && module == "core/sources/demo" { next }
        where=="in imports" && $1 == "source:" {
            source=$NF
            gsub("\r", "", source)
            accepted=0
            if (index(acceptedSources, " "source" ")>0) accepted=1
            if (substr(module, 0, 1)==".") accepted=1

            if (accepted==1) {
                if (doprint) print "  - module:", module
                if (doprint) print
            }
            next
        }
        where=="in imports" && $1 == "device:" && module !~ /^core.*/ {
            # a device that is not in core, skip it
            next
        }
        where=="in imports" && $0 !~ /^ *\r?$/ && $1 !~ /^#/ {
            if (doprint) print "  - module:", module
            if (doprint) print
            next
        }
        where=="in imports"  {
            next
        }

        where=="in sources" && /type:/ {
            if (debug) print "type line:" $0 > "/dev/stderr"
            nf=split($0, fields, "[ \t:,}]+")
            for (f = 1; f<=nf; f++) {
                if (fields[f]=="type" && f < nf) type=fields[f+1]
            }
            accepted=0
            if (index(acceptedSources, " "type" ")>0) accepted=1

            if (!accepted) {
                gsub(/type *: *[^ \t:,}]+,?/, "type: demo", $0);
            }
            if (doprint) print
            next
        }
        where=="in sources" && $0 ~ /^ *- *+[a-zA-Z0-9-]+ *: *{/ {
            if (debug) print "source line:" $0 > "/dev/stderr"
            if (doprint) print
            next
        }

        where=="in sources" && $0 ~ /^ +[a-zA-Z0-9-]+: */ {
            if (debug) print "attribute line:" $0 > "/dev/stderr"
            if (accepted) if (doprint) print
            next
        }

        where=="in sources" && $0 !~ /^  } *\r?$/ && $0 !~ /^ +[a-zA-Z0-9-]+:/ {
            if (debug) print "non attribute line:" $0 > "/dev/stderr"
            next
        }
        where=="in sources" && ( $0 ~ /^  } *\r?$/ || $0 ~ /{/ ) {
            if (debug) print "{ or }:" $0 > "/dev/stderr"
            if (doprint) print
            next
        }

        where=="in devices" && /type: *httpCamera/ {
            split($2, t, ":")
            camera_name=t[1]
            gsub(/video-url: *[^ \t,]+/, "video-url: /assets/imgs/demo_"camera_name".jpg", $0)
            gsub(/snapshot-url: *[^ \t,]+/, "snapshot-url: /assets/imgs/demo_"camera_name".jpg", $0)
            gsub(/camera:snapshot:[0-9]+/, "camera", $0)

            if (doprint) print
            next
        }

        where=="in devices" && /type:/ {
            nf=split($0, fields, "[ \t:,}]+")
            for (f = 1; f<=nf; f++) {
                if (fields[f]=="type" && f < nf) type=fields[f+1]
            }
            accepted=0
            if (index(" device sensor variable group ", " "type" ")>0) accepted=1

            if (!accepted) {
                gsub(/type *: *[^ \t:,}]+/, "type: variable", $0);
            }
            if (doprint) print
            next
        }

        where=="in pages" && /- widgets:/ {
            inwidgets=1

            if (doprint) print
            next
        }

        where=="in pages" && inwidgets==1 && /- [^:]+:/ {
            split($2, t, ":")
            dbcomp=t[1]

            if (doprint) print
            next
        }

        where=="in pages" && inwidgets==1 && /url:/ {
            gsub(/url: *[^ \t,]+/, "url: /assets/imgs/demo_dashboard_"dbcomp".jpg", $0)

            if (doprint) print
            next
        }

        { if (doprint) print }

        ' >> $DEMO_CONFIG
    done
    echo >> $DEMO_CONFIG
done

cat >> $DEMO_CONFIG <<EOF
users:
  - id: 0 # must be unique
    name: 'demouser'
    initials: 'du'
    login: demo
    password: demo
    phone: phone_1
    macaddress: 'e4:b5:26:3a:73:ac'
    avatar: ...
  - id: 1 # must be unique
    name: 'Luc'
    initials: 'LC'
    login: Luc
    password: demo
    phone: phone_1
    macaddress: 'e0:b5:2d:3a:76:ab'
    avatar: ...
  - id: 2 # must be unique
    name: 'Karen'
    initials: 'KC'
    login: Karen
    password: demo
    phone: phone_2
    macaddress: 'd8:c2:6a:bc:b3:2c'
    avatar: ...
  - id: 3 # must be unique
    name: 'Stéphane'
    initials: 'SC'
    login: Stéphane
    password: demo
    phone: phone_3
    macaddress: '40:6A:AE:6F:D7:45'
    avatar: ...
  - id: 4 # must be unique
    name: 'Nathalie'
    initials: 'NC'
    login: Nathalie
    password: demo
    phone: phone_4
    macaddress: 'B1:A2:E7:83:96:CB'
    avatar: ...
EOF

# do not keep/encrypt original files since they are now in a private repo
exit

#
# now create an encrypted file containing the original files
#
CONFIG_TAR=/tmp/config_files.tar.$$
CONFIG_TAR_ENC=$SOURCES_CONFIG_DIR/$(basename $CONFIG_TAR .$$).gpg
KEY=`echo $(cat ~/.ssh/id_rsa)`

# getting source files
FILES=$(cd $SOURCES_CONFIG_DIR; find . -name '*.yml' ! -name 'demo.yml')

# generate only if sha1sums have changed
generate=false
shafile=/tmp/config_files.sha.$$
( cd $SOURCES_CONFIG_DIR; sha1sum $FILES ) > $shafile
if [ -f $CONFIG_TAR_ENC ]
then
  if [ ! -r $shafile ] || [ ! -r $SOURCES_CONFIG_DIR/config_files.sha ] || ! cmp -s $shafile $SOURCES_CONFIG_DIR/config_files.sha
  then
    generate=true
  fi
else
  generate=true
fi

if $generate
then
  # create the tar file
  echo Creating tar file...
  ( cd $SOURCES_CONFIG_DIR; tar czf $CONFIG_TAR -C $SOURCES_CONFIG_DIR --exclude './demo.yml' $FILES)

  # then encrypt using the key
  echo Encrypting...
  rm -f $CONFIG_TAR_ENC
  echo $KEY | gpg --batch -c --no-random-seed-file --passphrase-fd 0 --output $CONFIG_TAR_ENC $CONFIG_TAR 

  # checking
  echo Verifying...
  echo $KEY | gpg --batch --decrypt --passphrase-fd 0 $CONFIG_TAR_ENC | tar tzvf -

  echo
  echo "For info, $CONFIG_TAR_ENC can be decrypted using:"
  echo \$ echo \$\(cat ~/.ssh/id_rsa\) \| gpg --batch --decrypt --passphrase-fd 0 $CONFIG_TAR_ENC \| tar xzvf -

  mv $shafile $SOURCES_CONFIG_DIR/config_files.sha

  # cleanup
  rm -f $CONFIG_TAR
fi


